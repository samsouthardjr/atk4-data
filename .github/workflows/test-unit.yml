name: Unit

on:
  pull_request:
  push:
  schedule:
    - cron: '0 0/2 * * *'

jobs:
  unit-test:
    name: Unit
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/mvorisek/image-php:${{ matrix.php }}
    strategy:
      fail-fast: false
      matrix:
        php: ['7.4', '8.0', '8.1']
        type: ['Phpunit']
        include:
          - php: 'latest'
            type: 'Phpunit Burn'
    env:
      LOG_COVERAGE: ""
    services:
      mysql:
        image: mysql:8
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5 -e MYSQL_ROOT_PASSWORD=atk4_pass_root -e MYSQL_USER=atk4_test_user -e MYSQL_PASSWORD=atk4_pass -e MYSQL_DATABASE=atk4_test --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: atk4_test_user
          POSTGRES_PASSWORD: atk4_pass
          POSTGRES_DB: atk4_test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mssql:
        image: mcr.microsoft.com/mssql/server
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: atk4_pass
      oracle:
        image: gvenzl/oracle-xe:18
        env:
          ORACLE_PASSWORD: atk4_pass
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure PHP
        run: |
          if [ -n "$LOG_COVERAGE" ]; then echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; else rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; fi
          php --version

      - name: Setup cache 1/2
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup cache 2/2
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ matrix.type }}-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: |
          if [ "${{ matrix.type }}" != "Phpunit" ] && [ "${{ matrix.type }}" != "Phpunit Lowest" ] && [ "${{ matrix.type }}" != "Phpunit Burn" ]; then composer remove --no-interaction --no-update phpunit/phpunit johnkary/phpunit-speedtrap --dev; fi
          if [ "${{ matrix.type }}" != "CodingStyle" ]; then composer remove --no-interaction --no-update friendsofphp/php-cs-fixer --dev && composer --no-update --ansi --prefer-dist --no-interaction --no-progress require jdorn/sql-formatter; fi
          if [ "${{ matrix.type }}" != "StaticAnalysis" ]; then composer remove --no-interaction --no-update phpstan/\* --dev; fi
          if [ -n "$LOG_COVERAGE" ]; then composer require --no-interaction --no-update phpunit/phpcov; fi
          composer update --ansi --prefer-dist --no-interaction --no-progress --optimize-autoloader
          if [ "${{ matrix.type }}" = "Phpunit Lowest" ]; then composer update --ansi --prefer-dist --prefer-lowest --prefer-stable --no-interaction --no-progress --optimize-autoloader; fi
          if [ "${{ matrix.type }}" = "Phpunit Burn" ]; then sed -i 's~ *public function runBare(): void~public function runBare(): void { gc_collect_cycles(); gc_collect_cycles(); $memDiffs = array_fill(0, '"$(if [ \"$GITHUB_EVENT_NAME\" == \"schedule\" ]; then echo 64; else echo 4; fi)"', 0); for ($i = -1; $i < count($memDiffs); ++$i) { $this->_runBare(); gc_collect_cycles(); gc_collect_cycles(); $mem = memory_get_usage(); if ($i !== -1) { $memDiffs[$i] = $mem - $memPrev; } $memPrev = $mem; rsort($memDiffs); if (array_sum($memDiffs) >= 4096 * 1024 || $memDiffs[2] > 0) { $this->onNotSuccessfulTest(new AssertionFailedError( "Memory leak detected! (" . implode(" + ", array_map(fn ($v) => number_format($v / 1024, 3, ".", " "), array_filter($memDiffs))) . " KB, " . ($i + 2) . " iterations)" )); } } } private function _runBare(): void~' vendor/phpunit/phpunit/src/Framework/TestCase.php && cat vendor/phpunit/phpunit/src/Framework/TestCase.php | grep '_runBare('; fi

      - name: Init
        run: |
          php -r '(new PDO("mysql:host=mysql", "root", "atk4_pass_root"))->exec("ALTER USER '"'"'atk4_test_user'"'"'@'"'"'%'"'"' WITH MAX_USER_CONNECTIONS 5");'
          php -r '(new PDO("pgsql:host=postgres;dbname=atk4_test", "atk4_test_user", "atk4_pass"))->exec("ALTER ROLE atk4_test_user CONNECTION LIMIT 1");'
          /usr/lib/oracle/setup.sh
          if [ -n "$LOG_COVERAGE" ]; then mkdir coverage; fi

      - name: "Run tests: SQLite"
        run: |
          php -d opcache.enable_cli=1 vendor/bin/phpunit --exclude-group none $(if [ -n "$LOG_COVERAGE" ]; then echo --coverage-text; else echo --no-coverage; fi) -v
          if [ -n "$LOG_COVERAGE" ]; then mv coverage/phpunit.cov coverage/phpunit-sqlite.cov; fi

      - name: "Run tests: MySQL - PDO"
        env:
          DB_DSN: "pdo_mysql:host=mysql;dbname=atk4_test"
          DB_USER: atk4_test_user
          DB_PASSWORD: atk4_pass
        run: |
          php -d opcache.enable_cli=1 vendor/bin/phpunit --exclude-group none $(if [ -n "$LOG_COVERAGE" ]; then echo --coverage-text; else echo --no-coverage; fi) -v
          if [ -n "$LOG_COVERAGE" ]; then mv coverage/phpunit.cov coverage/phpunit-mysql-pdo.cov; fi

      - name: "Run tests: PostgreSQL"
        env:
          DB_DSN: "pgsql:host=postgres;dbname=atk4_test"
          DB_USER: atk4_test_user
          DB_PASSWORD: atk4_pass
        run: |
          php -d opcache.enable_cli=1 vendor/bin/phpunit --exclude-group none $(if [ -n "$LOG_COVERAGE" ]; then echo --coverage-text; else echo --no-coverage; fi) -v
          if [ -n "$LOG_COVERAGE" ]; then mv coverage/phpunit.cov coverage/phpunit-postgres.cov; fi

      - name: "Run tests: MSSQL"
        env:
          DB_DSN: "sqlsrv:host=mssql;dbname=master;driverOptions[TrustServerCertificate]=1"
          DB_USER: sa
          DB_PASSWORD: atk4_pass
        run: |
          php -d opcache.enable_cli=1 vendor/bin/phpunit --exclude-group none $(if [ -n "$LOG_COVERAGE" ]; then echo --coverage-text; else echo --no-coverage; fi) -v
          if [ -n "$LOG_COVERAGE" ]; then mv coverage/phpunit.cov coverage/phpunit-mssql.cov; fi

      - name: "Run PHP src tests"
        run: |
          git clone -q https://github.com/mvorisek/php-src.git --depth 1 -b oracle_ci_debug
          export PHP_OCI8_TEST_USER="system"
          export PHP_OCI8_TEST_PASS="atk4_pass"
          export PHP_OCI8_TEST_DB="oracle/xe"
          export PDO_OCI_TEST_USER="system"
          export PDO_OCI_TEST_PASS="atk4_pass"
          export PDO_OCI_TEST_DSN="oci:dbname=oracle/xe;charset=AL32UTF8"
          cd php-src
          rm ext/oci8/tests/extauth_01.phpt ext/oci8/tests/extauth_02.phpt ext/oci8/tests/extauth_03.phpt ext/oci8/tests/error1.phpt ext/pdo_oci/tests/pecl_bug_11345.phpt
          ./run-tests.php -P -q -g FAIL,XFAIL,BORK,WARN,LEAK,XLEAK,SKIP --show-diff --show-slow 1000 --set-timeout 120

      - name: "Run tests: Oracle - PDO (only for coverage or cron)"
        if: env.LOG_COVERAGE || github.event_name == 'schedule'
        env:
          DB_DSN: "pdo_oci:dbname=oracle/xe"
          DB_USER: system
          DB_PASSWORD: atk4_pass
          NLS_LANG: AMERICAN_AMERICA.AL32UTF8
        run: |
          php -d opcache.enable_cli=1 vendor/bin/phpunit --exclude-group none $(if [ -n "$LOG_COVERAGE" ]; then echo --coverage-text; else echo --no-coverage; fi) -v
          if [ -n "$LOG_COVERAGE" ]; then mv coverage/phpunit.cov coverage/phpunit-oracle-pdo.cov; fi

      - name: "Run tests: Oracle - OCI8"
        env:
          DB_DSN: "oci8:dbname=oracle/xe"
          DB_USER: system
          DB_PASSWORD: atk4_pass
          NLS_LANG: AMERICAN_AMERICA.AL32UTF8
        run: |
          php -d opcache.enable_cli=1 vendor/bin/phpunit --exclude-group none $(if [ -n "$LOG_COVERAGE" ]; then echo --coverage-text; else echo --no-coverage; fi) -v
          if [ -n "$LOG_COVERAGE" ]; then mv coverage/phpunit.cov coverage/phpunit-oracle-oci8.cov; fi

      - name: Upload coverage logs 1/2 (only for latest Phpunit)
        if: env.LOG_COVERAGE
        run: |
          ls -l coverage | wc -l
          php -d memory_limit=2G vendor/bin/phpcov merge coverage/ --clover coverage/merged.xml

      - name: Upload coverage logs 2/2 (only for latest Phpunit)
        if: env.LOG_COVERAGE
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/merged.xml
